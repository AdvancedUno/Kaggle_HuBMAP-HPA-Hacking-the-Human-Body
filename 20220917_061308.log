2022-09-17 06:13:08,394 - mmseg - INFO - Multi-processing start method is `None`
2022-09-17 06:13:08,396 - mmseg - INFO - OpenCV num_threads is `2
2022-09-17 06:13:08,490 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:53) [GCC 9.4.0]
CUDA available: True
GPU 0: Tesla P100-PCIE-16GB
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.0, V11.0.221
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.11.0
PyTorch compiling details: PyTorch built with:
  - GCC 9.4
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2022.0-Product Build 20211112 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_70,code=compute_70;-gencode;arch=compute_75,code=compute_75
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.0, CUDNN_VERSION=8.0.5, CXX_COMPILER=/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0
OpenCV: 4.5.4
MMCV: 1.5.3
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.0
MMSegmentation: 0.26.0+
------------------------------------------------------------

2022-09-17 06:13:08,490 - mmseg - INFO - Distributed training: False
2022-09-17 06:13:09,991 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained=
    'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth',
    backbone=dict(
        type='MixVisionTransformer',
        in_channels=3,
        embed_dims=64,
        num_stages=4,
        num_layers=[3, 6, 40, 3],
        num_heads=[1, 2, 5, 8],
        patch_sizes=[7, 3, 3, 3],
        sr_ratios=[8, 4, 2, 1],
        out_indices=(0, 1, 2, 3),
        mlp_ratio=4,
        qkv_bias=True,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.1),
    decode_head=dict(
        type='SegformerHead',
        in_channels=[64, 128, 320, 512],
        in_index=[0, 1, 2, 3],
        channels=256,
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(
    type='AdamW',
    lr=6e-05,
    betas=(0.9, 0.999),
    weight_decay=0.01,
    paramwise_cfg=dict(
        custom_keys=dict(
            pos_block=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0),
            head=dict(lr_mult=10.0))))
optimizer_config = dict()
lr_config = dict(
    policy='poly',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06,
    power=1.0,
    min_lr=0.0,
    by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=10000)
checkpoint_config = dict(by_epoch=False, interval=200000)
evaluation = dict(interval=1000, metric='mDice', pre_eval=True)
checkpoint = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth'
data = dict(
    samples_per_gpu=6,
    workers_per_gpu=3,
    train=dict(
        type='CustomDataset',
        data_root='.',
        img_dir='../input/hubmap-organ-segmentation/train_images',
        ann_dir='masks',
        img_suffix='.tiff',
        seg_map_suffix='.png',
        split='splits/fold_3.txt',
        classes=[
            'background', 'kidney', 'prostate', 'largeintestine', 'spleen',
            'lung'
        ],
        palette=[[0, 0, 0], [255, 0, 0], [0, 255, 0], [0, 0, 255],
                 [255, 255, 0], [255, 0, 255]],
        pipeline=[
            dict(type='LoadAnnotations'),
            dict(type='LoadImageFromFile'),
            dict(type='RandomFlip', prob=0.5, direction='horizontal'),
            dict(type='RandomFlip', prob=0.5, direction='vertical'),
            dict(
                type='Normalize',
                mean=[0.7720342, 0.74582646, 0.76392896],
                std=[0.24745085, 0.26182273, 0.25782376],
                arg=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='CustomDataset',
        data_root='.',
        img_dir='../input/hubmap-organ-segmentation/train_images',
        ann_dir='masks',
        img_suffix='.tiff',
        seg_map_suffix='.png',
        split='splits/valid_3.txt',
        classes=[
            'background', 'kidney', 'prostate', 'largeintestine', 'spleen',
            'lung'
        ],
        palette=[[0, 0, 0], [255, 0, 0], [0, 255, 0], [0, 0, 255],
                 [255, 255, 0], [255, 0, 255]],
        pipeline=[
            dict(type='LoadImageFromFile', to_float32=False),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=True,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0.7720342, 0.74582646, 0.76392896],
                        std=[0.24745085, 0.26182273, 0.25782376]),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CustomDataset',
        data_root='.',
        test_mode=True,
        img_dir='../input/hubmap-organ-segmentation/train_images',
        ann_dir='masks',
        img_suffix='.tiff',
        seg_map_suffix='.png',
        classes=[
            'background', 'kidney', 'prostate', 'largeintestine', 'spleen',
            'lung'
        ],
        palette=[[0, 0, 0], [255, 0, 0], [0, 255, 0], [0, 0, 255],
                 [255, 255, 0], [255, 0, 255]],
        pipeline=[
            dict(type='LoadImageFromFile', to_float32=False),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=True,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0.7720342, 0.74582646, 0.76392896],
                        std=[0.24745085, 0.26182273, 0.25782376]),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
decode_head = dict(
    loss_decode=dict(type='Diceloss', use_sigmoid=False, loss_weight=1.0))
auxiliary_head = dict(
    loss_decode=dict(type='Diceloss', use_sigmoid=False, loss_weight=1.0))
dataset_type = 'CustomDataset'
data_root = '.'
classes = [
    'background', 'kidney', 'prostate', 'largeintestine', 'spleen', 'lung'
]
palette = [[0, 0, 0], [255, 0, 0], [0, 255, 0], [0, 0, 255], [255, 255, 0],
           [255, 0, 255]]
img_norm_cfg = dict(
    mean=[0.7720342, 0.74582646, 0.76392896],
    std=[0.24745085, 0.26182273, 0.25782376])
size = 512
swa_start = 6000
swa_freq = 2000
swa_lr = 1e-05
train_pipeline = [
    dict(type='LoadAnnotations'),
    dict(type='LoadImageFromFile'),
    dict(type='RandomFlip', prob=0.5, direction='horizontal'),
    dict(type='RandomFlip', prob=0.5, direction='vertical'),
    dict(
        type='Normalize',
        mean=[0.7720342, 0.74582646, 0.76392896],
        std=[0.24745085, 0.26182273, 0.25782376],
        arg=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile', to_float32=False),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(512, 512),
        flip=True,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[0.7720342, 0.74582646, 0.76392896],
                std=[0.24745085, 0.26182273, 0.25782376]),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
work_dir = './work_dirs/config'
gpu_ids = [0]
auto_resume = False

2022-09-17 06:13:09,992 - mmseg - INFO - Set random seed to 1836190370, deterministic: False
2022-09-17 06:13:10,966 - mmseg - INFO - initialize MixVisionTransformer with init_cfg {'type': 'Pretrained', 'checkpoint': 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth'}
2022-09-17 06:13:46,349 - mmseg - INFO - initialize SegformerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.layers.0.0.projection.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.0.projection.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.0.norm.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.0.norm.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.norm1.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.norm1.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.attn.attn.in_proj_weight - torch.Size([192, 64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.attn.attn.in_proj_bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.attn.attn.out_proj.weight - torch.Size([64, 64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.attn.attn.out_proj.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.attn.sr.weight - torch.Size([64, 64, 8, 8]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.attn.sr.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.attn.norm.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.attn.norm.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.norm2.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.norm2.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.ffn.layers.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.ffn.layers.0.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.ffn.layers.1.weight - torch.Size([256, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.ffn.layers.1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.ffn.layers.4.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.0.ffn.layers.4.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.norm1.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.norm1.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.attn.attn.in_proj_weight - torch.Size([192, 64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.attn.attn.in_proj_bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.attn.attn.out_proj.weight - torch.Size([64, 64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.attn.attn.out_proj.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.attn.sr.weight - torch.Size([64, 64, 8, 8]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.attn.sr.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.attn.norm.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.attn.norm.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.norm2.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.norm2.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.ffn.layers.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.ffn.layers.0.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.ffn.layers.1.weight - torch.Size([256, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.ffn.layers.1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.ffn.layers.4.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.1.ffn.layers.4.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.norm1.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.norm1.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.attn.attn.in_proj_weight - torch.Size([192, 64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.attn.attn.in_proj_bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.attn.attn.out_proj.weight - torch.Size([64, 64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.attn.attn.out_proj.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.attn.sr.weight - torch.Size([64, 64, 8, 8]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.attn.sr.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.attn.norm.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.attn.norm.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.norm2.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.norm2.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.ffn.layers.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.ffn.layers.0.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.ffn.layers.1.weight - torch.Size([256, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.ffn.layers.1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.ffn.layers.4.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.1.2.ffn.layers.4.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.2.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.0.2.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.0.projection.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.0.projection.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.0.norm.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.0.norm.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.norm1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.norm1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.attn.attn.in_proj_weight - torch.Size([384, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.attn.attn.in_proj_bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.attn.attn.out_proj.weight - torch.Size([128, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.attn.attn.out_proj.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.attn.sr.weight - torch.Size([128, 128, 4, 4]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.attn.sr.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.attn.norm.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.attn.norm.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.norm2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.norm2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.ffn.layers.0.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.ffn.layers.0.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.ffn.layers.1.weight - torch.Size([512, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.ffn.layers.1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.ffn.layers.4.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.0.ffn.layers.4.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.norm1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.norm1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.attn.attn.in_proj_weight - torch.Size([384, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.attn.attn.in_proj_bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.attn.attn.out_proj.weight - torch.Size([128, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.attn.attn.out_proj.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.attn.sr.weight - torch.Size([128, 128, 4, 4]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.attn.sr.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.attn.norm.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.attn.norm.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.norm2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.norm2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.ffn.layers.0.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.ffn.layers.0.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.ffn.layers.1.weight - torch.Size([512, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.ffn.layers.1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.ffn.layers.4.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.1.ffn.layers.4.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.norm1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.norm1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.attn.attn.in_proj_weight - torch.Size([384, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.attn.attn.in_proj_bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.attn.attn.out_proj.weight - torch.Size([128, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.attn.attn.out_proj.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.attn.sr.weight - torch.Size([128, 128, 4, 4]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.attn.sr.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.attn.norm.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.attn.norm.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.norm2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.norm2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.ffn.layers.0.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.ffn.layers.0.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.ffn.layers.1.weight - torch.Size([512, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.ffn.layers.1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.ffn.layers.4.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.2.ffn.layers.4.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.norm1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.norm1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.attn.attn.in_proj_weight - torch.Size([384, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.attn.attn.in_proj_bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.attn.attn.out_proj.weight - torch.Size([128, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.attn.attn.out_proj.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.attn.sr.weight - torch.Size([128, 128, 4, 4]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.attn.sr.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.attn.norm.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.attn.norm.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.norm2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.norm2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.ffn.layers.0.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.ffn.layers.0.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.ffn.layers.1.weight - torch.Size([512, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.ffn.layers.1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.ffn.layers.4.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.3.ffn.layers.4.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.norm1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.norm1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.attn.attn.in_proj_weight - torch.Size([384, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.attn.attn.in_proj_bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.attn.attn.out_proj.weight - torch.Size([128, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.attn.attn.out_proj.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.attn.sr.weight - torch.Size([128, 128, 4, 4]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.attn.sr.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.attn.norm.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.attn.norm.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.norm2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.norm2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.ffn.layers.0.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.ffn.layers.0.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.ffn.layers.1.weight - torch.Size([512, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.ffn.layers.1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.ffn.layers.4.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.4.ffn.layers.4.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.norm1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.norm1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.attn.attn.in_proj_weight - torch.Size([384, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.attn.attn.in_proj_bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.attn.attn.out_proj.weight - torch.Size([128, 128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.attn.attn.out_proj.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.attn.sr.weight - torch.Size([128, 128, 4, 4]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.attn.sr.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.attn.norm.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.attn.norm.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.norm2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.norm2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.ffn.layers.0.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.ffn.layers.0.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.ffn.layers.1.weight - torch.Size([512, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.ffn.layers.1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.ffn.layers.4.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.1.5.ffn.layers.4.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.1.2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.0.projection.weight - torch.Size([320, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.0.projection.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.0.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.0.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.0.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.1.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.2.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.3.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.4.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.5.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.6.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.7.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.8.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.9.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.10.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.11.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.12.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.13.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.14.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.15.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.16.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.17.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.18.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.19.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.20.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.21.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.22.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.23.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.24.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.25.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.26.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.27.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.28.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.29.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.30.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.31.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.32.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.33.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.34.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.35.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.36.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.37.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.38.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.norm1.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.norm1.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.attn.attn.in_proj_weight - torch.Size([960, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.attn.attn.in_proj_bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.attn.attn.out_proj.weight - torch.Size([320, 320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.attn.attn.out_proj.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.attn.sr.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.attn.norm.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.attn.norm.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.norm2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.norm2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.ffn.layers.0.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.ffn.layers.1.bias - torch.Size([1280]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.1.39.ffn.layers.4.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.2.weight - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.2.2.bias - torch.Size([320]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.0.projection.weight - torch.Size([512, 320, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.0.projection.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.0.norm.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.0.norm.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.norm1.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.norm1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.attn.attn.in_proj_weight - torch.Size([1536, 512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.attn.attn.in_proj_bias - torch.Size([1536]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.attn.attn.out_proj.weight - torch.Size([512, 512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.attn.attn.out_proj.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.norm2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.norm2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.ffn.layers.0.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.ffn.layers.0.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.ffn.layers.1.weight - torch.Size([2048, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.ffn.layers.1.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.ffn.layers.4.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.0.ffn.layers.4.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.norm1.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.norm1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.attn.attn.in_proj_weight - torch.Size([1536, 512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.attn.attn.in_proj_bias - torch.Size([1536]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.attn.attn.out_proj.weight - torch.Size([512, 512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.attn.attn.out_proj.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.norm2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.norm2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.ffn.layers.0.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.ffn.layers.0.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.ffn.layers.1.weight - torch.Size([2048, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.ffn.layers.1.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.ffn.layers.4.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.1.ffn.layers.4.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.norm1.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.norm1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.attn.attn.in_proj_weight - torch.Size([1536, 512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.attn.attn.in_proj_bias - torch.Size([1536]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.attn.attn.out_proj.weight - torch.Size([512, 512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.attn.attn.out_proj.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.norm2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.norm2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.ffn.layers.0.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.ffn.layers.0.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.ffn.layers.1.weight - torch.Size([2048, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.ffn.layers.1.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.ffn.layers.4.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.1.2.ffn.layers.4.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

backbone.layers.3.2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth 

decode_head.conv_seg.weight - torch.Size([6, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.convs.0.0.conv.weight - torch.Size([256, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.0.conv.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.1.mixing - torch.Size([]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.2.0.conv.weight - torch.Size([256, 320, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.2.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.2.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.2.1.mixing - torch.Size([]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.3.0.conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.3.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.3.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.3.1.mixing - torch.Size([]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fusion_conv.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.fusion_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fusion_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2022-09-17 06:13:46,370 - mmseg - INFO - EncoderDecoder(
  (backbone): MixVisionTransformer(
    (layers): ModuleList(
      (0): ModuleList(
        (0): PatchEmbed(
          (projection): Conv2d(3, 64, kernel_size=(7, 7), stride=(4, 4), padding=(3, 3))
          (norm): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
        )
        (1): ModuleList(
          (0): TransformerEncoderLayer(
            (norm1): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(64, 64, kernel_size=(8, 8), stride=(8, 8))
              (norm): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (1): TransformerEncoderLayer(
            (norm1): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(64, 64, kernel_size=(8, 8), stride=(8, 8))
              (norm): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (2): TransformerEncoderLayer(
            (norm1): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(64, 64, kernel_size=(8, 8), stride=(8, 8))
              (norm): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
        )
        (2): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
      )
      (1): ModuleList(
        (0): PatchEmbed(
          (projection): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
        )
        (1): ModuleList(
          (0): TransformerEncoderLayer(
            (norm1): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(128, 128, kernel_size=(4, 4), stride=(4, 4))
              (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (1): TransformerEncoderLayer(
            (norm1): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(128, 128, kernel_size=(4, 4), stride=(4, 4))
              (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (2): TransformerEncoderLayer(
            (norm1): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(128, 128, kernel_size=(4, 4), stride=(4, 4))
              (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (3): TransformerEncoderLayer(
            (norm1): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(128, 128, kernel_size=(4, 4), stride=(4, 4))
              (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (4): TransformerEncoderLayer(
            (norm1): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(128, 128, kernel_size=(4, 4), stride=(4, 4))
              (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (5): TransformerEncoderLayer(
            (norm1): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(128, 128, kernel_size=(4, 4), stride=(4, 4))
              (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
        )
        (2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
      )
      (2): ModuleList(
        (0): PatchEmbed(
          (projection): Conv2d(128, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
        )
        (1): ModuleList(
          (0): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (1): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (2): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (3): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (4): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (5): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (6): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (7): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (8): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (9): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (10): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (11): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (12): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (13): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (14): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (15): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (16): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (17): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (18): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (19): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (20): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (21): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (22): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (23): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (24): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (25): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (26): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (27): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (28): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (29): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (30): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (31): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (32): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (33): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (34): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (35): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (36): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (37): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (38): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (39): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
        )
        (2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
      )
      (3): ModuleList(
        (0): PatchEmbed(
          (projection): Conv2d(320, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (norm): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
        )
        (1): ModuleList(
          (0): TransformerEncoderLayer(
            (norm1): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
            )
            (norm2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (1): TransformerEncoderLayer(
            (norm1): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
            )
            (norm2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (2): TransformerEncoderLayer(
            (norm1): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
            )
            (norm2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
        )
        (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b5_20220624-658746d9.pth'}
  (decode_head): SegformerHead(
    input_transform=multiple_select, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(256, 6, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): ModuleList(
      (0): Sequential(
        (0): ConvModule(
          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): Identity()
      )
      (1): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): MixUpSample()
      )
      (2): Sequential(
        (0): ConvModule(
          (conv): Conv2d(320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): MixUpSample()
      )
      (3): Sequential(
        (0): ConvModule(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): MixUpSample()
      )
    )
    (fusion_conv): ConvModule(
      (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2022-09-17 06:13:46,401 - mmseg - INFO - Loaded 281 images
2022-09-17 06:13:52,778 - mmseg - INFO - Loaded 70 images
2022-09-17 06:13:52,778 - mmseg - INFO - Start running, host: root@194ff73aa45a, work_dir: /kaggle/working/work_dirs/config
2022-09-17 06:13:52,779 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-09-17 06:13:52,779 - mmseg - INFO - workflow: [('train', 1)], max: 10000 iters
2022-09-17 06:13:52,779 - mmseg - INFO - Checkpoints will be saved to /kaggle/working/work_dirs/config by HardDiskBackend.
2022-09-17 06:15:46,758 - mmseg - INFO - Iter [50/10000]	lr: 5.000e-05, eta: 6:17:45, time: 2.278, data_time: 0.170, memory: 14441, decode.loss_ce: 1.6194, decode.acc_seg: 58.3987, loss: 1.6194
2022-09-17 06:17:19,656 - mmseg - INFO - Iter [100/10000]	lr: 5.000e-05, eta: 5:41:12, time: 1.858, data_time: 0.114, memory: 14441, decode.loss_ce: 1.2143, decode.acc_seg: 87.9843, loss: 1.2143
2022-09-17 06:18:49,226 - mmseg - INFO - Iter [150/10000]	lr: 5.000e-05, eta: 5:24:21, time: 1.791, data_time: 0.096, memory: 14441, decode.loss_ce: 0.9195, decode.acc_seg: 91.1850, loss: 0.9195
2022-09-17 06:20:18,774 - mmseg - INFO - Iter [200/10000]	lr: 5.000e-05, eta: 5:15:09, time: 1.791, data_time: 0.099, memory: 14441, decode.loss_ce: 0.7087, decode.acc_seg: 92.0375, loss: 0.7087
2022-09-17 06:21:48,734 - mmseg - INFO - Iter [250/10000]	lr: 5.000e-05, eta: 5:09:18, time: 1.799, data_time: 0.103, memory: 14441, decode.loss_ce: 0.5627, decode.acc_seg: 93.2277, loss: 0.5627
2022-09-17 06:23:18,543 - mmseg - INFO - Iter [300/10000]	lr: 5.000e-05, eta: 5:04:50, time: 1.796, data_time: 0.106, memory: 14441, decode.loss_ce: 0.4599, decode.acc_seg: 93.5959, loss: 0.4599
2022-09-17 06:24:47,986 - mmseg - INFO - Iter [350/10000]	lr: 5.000e-05, eta: 5:01:02, time: 1.789, data_time: 0.096, memory: 14441, decode.loss_ce: 0.3933, decode.acc_seg: 93.9482, loss: 0.3933
2022-09-17 06:26:17,637 - mmseg - INFO - Iter [400/10000]	lr: 5.000e-05, eta: 4:57:54, time: 1.793, data_time: 0.096, memory: 14441, decode.loss_ce: 0.3466, decode.acc_seg: 93.9843, loss: 0.3466
2022-09-17 06:27:47,435 - mmseg - INFO - Iter [450/10000]	lr: 5.000e-05, eta: 4:55:11, time: 1.796, data_time: 0.098, memory: 14441, decode.loss_ce: 0.3001, decode.acc_seg: 94.6487, loss: 0.3001
2022-09-17 06:29:16,858 - mmseg - INFO - Iter [500/10000]	lr: 5.000e-05, eta: 4:52:35, time: 1.788, data_time: 0.095, memory: 14441, decode.loss_ce: 0.2708, decode.acc_seg: 94.9137, loss: 0.2708
2022-09-17 06:30:46,421 - mmseg - INFO - Iter [550/10000]	lr: 5.000e-05, eta: 4:50:14, time: 1.791, data_time: 0.100, memory: 14441, decode.loss_ce: 0.2599, decode.acc_seg: 94.7184, loss: 0.2599
2022-09-17 06:32:20,860 - mmseg - INFO - Iter [600/10000]	lr: 5.000e-05, eta: 4:49:18, time: 1.889, data_time: 0.185, memory: 14441, decode.loss_ce: 0.2195, decode.acc_seg: 95.5887, loss: 0.2195
2022-09-17 06:33:50,603 - mmseg - INFO - Iter [650/10000]	lr: 5.000e-05, eta: 4:47:08, time: 1.795, data_time: 0.097, memory: 14441, decode.loss_ce: 0.2164, decode.acc_seg: 95.2696, loss: 0.2164
2022-09-17 06:35:20,980 - mmseg - INFO - Iter [700/10000]	lr: 5.000e-05, eta: 4:45:13, time: 1.808, data_time: 0.110, memory: 14441, decode.loss_ce: 0.2006, decode.acc_seg: 95.4468, loss: 0.2006
2022-09-17 06:36:50,608 - mmseg - INFO - Iter [750/10000]	lr: 5.000e-05, eta: 4:43:11, time: 1.793, data_time: 0.099, memory: 14441, decode.loss_ce: 0.1916, decode.acc_seg: 95.5651, loss: 0.1916
2022-09-17 06:38:20,552 - mmseg - INFO - Iter [800/10000]	lr: 5.000e-05, eta: 4:41:18, time: 1.799, data_time: 0.105, memory: 14441, decode.loss_ce: 0.1790, decode.acc_seg: 95.5701, loss: 0.1790
2022-09-17 06:39:50,024 - mmseg - INFO - Iter [850/10000]	lr: 5.000e-05, eta: 4:39:22, time: 1.789, data_time: 0.092, memory: 14441, decode.loss_ce: 0.1802, decode.acc_seg: 95.1752, loss: 0.1802
2022-09-17 06:41:19,728 - mmseg - INFO - Iter [900/10000]	lr: 5.000e-05, eta: 4:37:31, time: 1.794, data_time: 0.103, memory: 14441, decode.loss_ce: 0.1729, decode.acc_seg: 95.5285, loss: 0.1729
2022-09-17 06:42:49,552 - mmseg - INFO - Iter [950/10000]	lr: 5.000e-05, eta: 4:35:44, time: 1.796, data_time: 0.100, memory: 14441, decode.loss_ce: 0.1545, decode.acc_seg: 95.9876, loss: 0.1545
2022-09-17 06:44:19,228 - mmseg - INFO - Exp name: config.py
2022-09-17 06:44:19,228 - mmseg - INFO - Iter [1000/10000]	lr: 5.000e-05, eta: 4:33:57, time: 1.794, data_time: 0.099, memory: 14441, decode.loss_ce: 0.1501, decode.acc_seg: 95.9648, loss: 0.1501
2022-09-17 06:44:39,507 - mmseg - INFO - per class results:
2022-09-17 06:44:39,508 - mmseg - INFO - 
+----------------+-------+-------+
|     Class      |  Dice |  Acc  |
+----------------+-------+-------+
|   background   | 98.18 | 98.29 |
|     kidney     | 86.26 | 83.56 |
|    prostate    | 86.05 | 90.73 |
| largeintestine | 80.13 |  77.2 |
|     spleen     | 79.51 | 75.99 |
|      lung      |  0.0  |  0.0  |
+----------------+-------+-------+
2022-09-17 06:44:39,508 - mmseg - INFO - Summary:
2022-09-17 06:44:39,509 - mmseg - INFO - 
+------+-------+-------+
| aAcc | mDice |  mAcc |
+------+-------+-------+
| 96.7 | 71.69 | 70.96 |
+------+-------+-------+
2022-09-17 06:44:39,510 - mmseg - INFO - Exp name: config.py
2022-09-17 06:44:39,510 - mmseg - INFO - Iter(val) [70]	aAcc: 0.9670, mDice: 0.7169, mAcc: 0.7096, Dice.background: 0.9818, Dice.kidney: 0.8626, Dice.prostate: 0.8605, Dice.largeintestine: 0.8013, Dice.spleen: 0.7951, Dice.lung: 0.0000, Acc.background: 0.9829, Acc.kidney: 0.8356, Acc.prostate: 0.9073, Acc.largeintestine: 0.7720, Acc.spleen: 0.7599, Acc.lung: 0.0000
2022-09-17 06:46:11,266 - mmseg - INFO - Iter [1050/10000]	lr: 5.000e-05, eta: 4:35:22, time: 2.241, data_time: 0.516, memory: 14441, decode.loss_ce: 0.1528, decode.acc_seg: 95.8744, loss: 0.1528
2022-09-17 06:47:40,798 - mmseg - INFO - Iter [1100/10000]	lr: 5.000e-05, eta: 4:33:27, time: 1.791, data_time: 0.097, memory: 14441, decode.loss_ce: 0.1441, decode.acc_seg: 96.0054, loss: 0.1441
2022-09-17 06:49:10,647 - mmseg - INFO - Iter [1150/10000]	lr: 5.000e-05, eta: 4:31:37, time: 1.797, data_time: 0.104, memory: 14441, decode.loss_ce: 0.1352, decode.acc_seg: 96.1697, loss: 0.1352
2022-09-17 06:50:45,531 - mmseg - INFO - Iter [1200/10000]	lr: 5.000e-05, eta: 4:30:26, time: 1.898, data_time: 0.188, memory: 14441, decode.loss_ce: 0.1329, decode.acc_seg: 96.2233, loss: 0.1329
2022-09-17 06:52:15,176 - mmseg - INFO - Iter [1250/10000]	lr: 5.000e-05, eta: 4:28:35, time: 1.793, data_time: 0.100, memory: 14441, decode.loss_ce: 0.1389, decode.acc_seg: 95.9008, loss: 0.1389
2022-09-17 06:53:45,077 - mmseg - INFO - Iter [1300/10000]	lr: 5.000e-05, eta: 4:26:49, time: 1.798, data_time: 0.100, memory: 14441, decode.loss_ce: 0.1277, decode.acc_seg: 96.2246, loss: 0.1277
2022-09-17 06:55:14,769 - mmseg - INFO - Iter [1350/10000]	lr: 5.000e-05, eta: 4:25:02, time: 1.794, data_time: 0.098, memory: 14441, decode.loss_ce: 0.1256, decode.acc_seg: 96.3057, loss: 0.1256
2022-09-17 06:56:45,027 - mmseg - INFO - Iter [1400/10000]	lr: 5.000e-05, eta: 4:23:20, time: 1.805, data_time: 0.114, memory: 14441, decode.loss_ce: 0.1296, decode.acc_seg: 96.1205, loss: 0.1296
2022-09-17 06:58:14,455 - mmseg - INFO - Iter [1450/10000]	lr: 5.000e-05, eta: 4:21:34, time: 1.789, data_time: 0.097, memory: 14441, decode.loss_ce: 0.1113, decode.acc_seg: 96.6256, loss: 0.1113
2022-09-17 06:59:43,657 - mmseg - INFO - Iter [1500/10000]	lr: 5.000e-05, eta: 4:19:47, time: 1.784, data_time: 0.094, memory: 14441, decode.loss_ce: 0.1115, decode.acc_seg: 96.5622, loss: 0.1115
2022-09-17 07:01:13,355 - mmseg - INFO - Iter [1550/10000]	lr: 5.000e-05, eta: 4:18:05, time: 1.794, data_time: 0.093, memory: 14441, decode.loss_ce: 0.1090, decode.acc_seg: 96.5533, loss: 0.1090
2022-09-17 07:02:42,902 - mmseg - INFO - Iter [1600/10000]	lr: 5.000e-05, eta: 4:16:22, time: 1.791, data_time: 0.099, memory: 14441, decode.loss_ce: 0.1111, decode.acc_seg: 96.5517, loss: 0.1111
2022-09-17 07:04:12,485 - mmseg - INFO - Iter [1650/10000]	lr: 5.000e-05, eta: 4:14:40, time: 1.791, data_time: 0.097, memory: 14441, decode.loss_ce: 0.1072, decode.acc_seg: 96.5020, loss: 0.1072
2022-09-17 07:05:41,854 - mmseg - INFO - Iter [1700/10000]	lr: 5.000e-05, eta: 4:12:58, time: 1.787, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0971, decode.acc_seg: 97.0078, loss: 0.0971
2022-09-17 07:07:15,888 - mmseg - INFO - Iter [1750/10000]	lr: 5.000e-05, eta: 4:11:39, time: 1.881, data_time: 0.176, memory: 14441, decode.loss_ce: 0.1034, decode.acc_seg: 96.7313, loss: 0.1034
2022-09-17 07:08:45,742 - mmseg - INFO - Iter [1800/10000]	lr: 5.000e-05, eta: 4:10:00, time: 1.797, data_time: 0.100, memory: 14441, decode.loss_ce: 0.0980, decode.acc_seg: 96.9508, loss: 0.0980
2022-09-17 07:10:15,099 - mmseg - INFO - Iter [1850/10000]	lr: 5.000e-05, eta: 4:08:19, time: 1.787, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0992, decode.acc_seg: 96.8048, loss: 0.0992
2022-09-17 07:11:44,502 - mmseg - INFO - Iter [1900/10000]	lr: 5.000e-05, eta: 4:06:39, time: 1.788, data_time: 0.097, memory: 14441, decode.loss_ce: 0.1035, decode.acc_seg: 96.6327, loss: 0.1035
2022-09-17 07:13:13,761 - mmseg - INFO - Iter [1950/10000]	lr: 5.000e-05, eta: 4:04:59, time: 1.785, data_time: 0.093, memory: 14441, decode.loss_ce: 0.0923, decode.acc_seg: 96.9622, loss: 0.0923
2022-09-17 07:14:43,595 - mmseg - INFO - Exp name: config.py
2022-09-17 07:14:43,596 - mmseg - INFO - Iter [2000/10000]	lr: 5.000e-05, eta: 4:03:22, time: 1.797, data_time: 0.107, memory: 14441, decode.loss_ce: 0.1149, decode.acc_seg: 96.0979, loss: 0.1149
2022-09-17 07:15:02,400 - mmseg - INFO - per class results:
2022-09-17 07:15:02,402 - mmseg - INFO - 
+----------------+-------+-------+
|     Class      |  Dice |  Acc  |
+----------------+-------+-------+
|   background   | 98.42 | 98.44 |
|     kidney     | 89.04 | 91.62 |
|    prostate    |  87.4 | 91.11 |
| largeintestine | 84.24 | 84.19 |
|     spleen     | 81.44 | 74.89 |
|      lung      |  0.0  |  0.0  |
+----------------+-------+-------+
2022-09-17 07:15:02,402 - mmseg - INFO - Summary:
2022-09-17 07:15:02,403 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc | mDice |  mAcc |
+-------+-------+-------+
| 97.14 | 73.42 | 73.38 |
+-------+-------+-------+
2022-09-17 07:15:02,403 - mmseg - INFO - Exp name: config.py
2022-09-17 07:15:02,404 - mmseg - INFO - Iter(val) [70]	aAcc: 0.9714, mDice: 0.7342, mAcc: 0.7338, Dice.background: 0.9842, Dice.kidney: 0.8904, Dice.prostate: 0.8740, Dice.largeintestine: 0.8424, Dice.spleen: 0.8144, Dice.lung: 0.0000, Acc.background: 0.9844, Acc.kidney: 0.9162, Acc.prostate: 0.9111, Acc.largeintestine: 0.8419, Acc.spleen: 0.7489, Acc.lung: 0.0000
2022-09-17 07:16:31,791 - mmseg - INFO - Iter [2050/10000]	lr: 5.000e-05, eta: 4:02:57, time: 2.164, data_time: 0.477, memory: 14441, decode.loss_ce: 0.0959, decode.acc_seg: 96.7990, loss: 0.0959
2022-09-17 07:18:01,617 - mmseg - INFO - Iter [2100/10000]	lr: 5.000e-05, eta: 4:01:18, time: 1.797, data_time: 0.101, memory: 14441, decode.loss_ce: 0.0868, decode.acc_seg: 97.1079, loss: 0.0868
2022-09-17 07:19:31,288 - mmseg - INFO - Iter [2150/10000]	lr: 5.000e-05, eta: 3:59:39, time: 1.793, data_time: 0.102, memory: 14441, decode.loss_ce: 0.0832, decode.acc_seg: 97.2454, loss: 0.0832
2022-09-17 07:21:00,892 - mmseg - INFO - Iter [2200/10000]	lr: 5.000e-05, eta: 3:58:00, time: 1.792, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0827, decode.acc_seg: 97.2482, loss: 0.0827
2022-09-17 07:22:30,089 - mmseg - INFO - Iter [2250/10000]	lr: 5.000e-05, eta: 3:56:21, time: 1.784, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0922, decode.acc_seg: 96.8240, loss: 0.0922
2022-09-17 07:23:59,399 - mmseg - INFO - Iter [2300/10000]	lr: 5.000e-05, eta: 3:54:42, time: 1.786, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0789, decode.acc_seg: 97.3208, loss: 0.0789
2022-09-17 07:25:33,987 - mmseg - INFO - Iter [2350/10000]	lr: 5.000e-05, eta: 3:53:21, time: 1.892, data_time: 0.184, memory: 14441, decode.loss_ce: 0.0787, decode.acc_seg: 97.3220, loss: 0.0787
2022-09-17 07:27:03,590 - mmseg - INFO - Iter [2400/10000]	lr: 5.000e-05, eta: 3:51:43, time: 1.792, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0786, decode.acc_seg: 97.3350, loss: 0.0786
2022-09-17 07:28:33,132 - mmseg - INFO - Iter [2450/10000]	lr: 5.000e-05, eta: 3:50:06, time: 1.791, data_time: 0.094, memory: 14441, decode.loss_ce: 0.0826, decode.acc_seg: 97.1396, loss: 0.0826
2022-09-17 07:30:02,382 - mmseg - INFO - Iter [2500/10000]	lr: 5.000e-05, eta: 3:48:28, time: 1.785, data_time: 0.090, memory: 14441, decode.loss_ce: 0.0839, decode.acc_seg: 97.0084, loss: 0.0839
2022-09-17 07:31:32,460 - mmseg - INFO - Iter [2550/10000]	lr: 5.000e-05, eta: 3:46:53, time: 1.802, data_time: 0.106, memory: 14441, decode.loss_ce: 0.0847, decode.acc_seg: 97.0130, loss: 0.0847
2022-09-17 07:33:01,639 - mmseg - INFO - Iter [2600/10000]	lr: 5.000e-05, eta: 3:45:15, time: 1.784, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0712, decode.acc_seg: 97.5256, loss: 0.0712
2022-09-17 07:34:31,364 - mmseg - INFO - Iter [2650/10000]	lr: 5.000e-05, eta: 3:43:39, time: 1.794, data_time: 0.104, memory: 14441, decode.loss_ce: 0.0722, decode.acc_seg: 97.4638, loss: 0.0722
2022-09-17 07:36:01,416 - mmseg - INFO - Iter [2700/10000]	lr: 5.000e-05, eta: 3:42:05, time: 1.801, data_time: 0.100, memory: 14441, decode.loss_ce: 0.0685, decode.acc_seg: 97.5441, loss: 0.0685
2022-09-17 07:37:31,060 - mmseg - INFO - Iter [2750/10000]	lr: 5.000e-05, eta: 3:40:29, time: 1.793, data_time: 0.105, memory: 14441, decode.loss_ce: 0.0690, decode.acc_seg: 97.5390, loss: 0.0690
2022-09-17 07:39:00,785 - mmseg - INFO - Iter [2800/10000]	lr: 5.000e-05, eta: 3:38:54, time: 1.794, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0739, decode.acc_seg: 97.3402, loss: 0.0739
2022-09-17 07:40:30,222 - mmseg - INFO - Iter [2850/10000]	lr: 5.000e-05, eta: 3:37:18, time: 1.789, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0654, decode.acc_seg: 97.6433, loss: 0.0654
2022-09-17 07:42:04,392 - mmseg - INFO - Iter [2900/10000]	lr: 5.000e-05, eta: 3:35:54, time: 1.883, data_time: 0.184, memory: 14441, decode.loss_ce: 0.0684, decode.acc_seg: 97.5625, loss: 0.0684
2022-09-17 07:43:33,979 - mmseg - INFO - Iter [2950/10000]	lr: 5.000e-05, eta: 3:34:19, time: 1.792, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0692, decode.acc_seg: 97.5223, loss: 0.0692
2022-09-17 07:45:03,243 - mmseg - INFO - Exp name: config.py
2022-09-17 07:45:03,244 - mmseg - INFO - Iter [3000/10000]	lr: 5.000e-05, eta: 3:32:44, time: 1.785, data_time: 0.093, memory: 14441, decode.loss_ce: 0.0690, decode.acc_seg: 97.4592, loss: 0.0690
2022-09-17 07:45:21,747 - mmseg - INFO - per class results:
2022-09-17 07:45:21,748 - mmseg - INFO - 
+----------------+-------+-------+
|     Class      |  Dice |  Acc  |
+----------------+-------+-------+
|   background   | 98.47 | 98.95 |
|     kidney     | 90.79 | 92.46 |
|    prostate    | 85.19 | 81.14 |
| largeintestine | 85.79 | 82.38 |
|     spleen     |  81.4 | 78.23 |
|      lung      | 11.85 |  7.04 |
+----------------+-------+-------+
2022-09-17 07:45:21,748 - mmseg - INFO - Summary:
2022-09-17 07:45:21,749 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc | mDice |  mAcc |
+-------+-------+-------+
| 97.22 | 75.58 | 73.37 |
+-------+-------+-------+
2022-09-17 07:45:21,750 - mmseg - INFO - Exp name: config.py
2022-09-17 07:45:21,750 - mmseg - INFO - Iter(val) [70]	aAcc: 0.9722, mDice: 0.7558, mAcc: 0.7337, Dice.background: 0.9847, Dice.kidney: 0.9079, Dice.prostate: 0.8519, Dice.largeintestine: 0.8579, Dice.spleen: 0.8140, Dice.lung: 0.1185, Acc.background: 0.9895, Acc.kidney: 0.9246, Acc.prostate: 0.8114, Acc.largeintestine: 0.8238, Acc.spleen: 0.7823, Acc.lung: 0.0704
2022-09-17 07:46:51,583 - mmseg - INFO - Iter [3050/10000]	lr: 5.000e-05, eta: 3:31:51, time: 2.167, data_time: 0.466, memory: 14441, decode.loss_ce: 0.0785, decode.acc_seg: 97.1700, loss: 0.0785
2022-09-17 07:48:21,598 - mmseg - INFO - Iter [3100/10000]	lr: 5.000e-05, eta: 3:30:17, time: 1.800, data_time: 0.106, memory: 14441, decode.loss_ce: 0.0671, decode.acc_seg: 97.5309, loss: 0.0671
2022-09-17 07:49:51,535 - mmseg - INFO - Iter [3150/10000]	lr: 5.000e-05, eta: 3:28:42, time: 1.799, data_time: 0.100, memory: 14441, decode.loss_ce: 0.0653, decode.acc_seg: 97.6245, loss: 0.0653
2022-09-17 07:51:20,908 - mmseg - INFO - Iter [3200/10000]	lr: 5.000e-05, eta: 3:27:06, time: 1.787, data_time: 0.102, memory: 14441, decode.loss_ce: 0.0703, decode.acc_seg: 97.5225, loss: 0.0703
2022-09-17 07:52:50,623 - mmseg - INFO - Iter [3250/10000]	lr: 5.000e-05, eta: 3:25:32, time: 1.794, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0695, decode.acc_seg: 97.4618, loss: 0.0695
2022-09-17 07:54:20,371 - mmseg - INFO - Iter [3300/10000]	lr: 5.000e-05, eta: 3:23:57, time: 1.795, data_time: 0.104, memory: 14441, decode.loss_ce: 0.0671, decode.acc_seg: 97.5325, loss: 0.0671
2022-09-17 07:55:49,801 - mmseg - INFO - Iter [3350/10000]	lr: 5.000e-05, eta: 3:22:22, time: 1.789, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0656, decode.acc_seg: 97.5956, loss: 0.0656
2022-09-17 07:57:19,597 - mmseg - INFO - Iter [3400/10000]	lr: 5.000e-05, eta: 3:20:48, time: 1.796, data_time: 0.104, memory: 14441, decode.loss_ce: 0.0606, decode.acc_seg: 97.7378, loss: 0.0606
2022-09-17 07:58:48,574 - mmseg - INFO - Iter [3450/10000]	lr: 5.000e-05, eta: 3:19:12, time: 1.780, data_time: 0.091, memory: 14441, decode.loss_ce: 0.0619, decode.acc_seg: 97.6859, loss: 0.0619
2022-09-17 08:00:23,075 - mmseg - INFO - Iter [3500/10000]	lr: 5.000e-05, eta: 3:17:47, time: 1.890, data_time: 0.188, memory: 14441, decode.loss_ce: 0.0646, decode.acc_seg: 97.6279, loss: 0.0646
2022-09-17 08:01:52,816 - mmseg - INFO - Iter [3550/10000]	lr: 5.000e-05, eta: 3:16:13, time: 1.795, data_time: 0.100, memory: 14441, decode.loss_ce: 0.0864, decode.acc_seg: 96.7977, loss: 0.0864
2022-09-17 08:03:22,687 - mmseg - INFO - Iter [3600/10000]	lr: 5.000e-05, eta: 3:14:39, time: 1.797, data_time: 0.093, memory: 14441, decode.loss_ce: 0.0681, decode.acc_seg: 97.4710, loss: 0.0681
2022-09-17 08:04:51,895 - mmseg - INFO - Iter [3650/10000]	lr: 5.000e-05, eta: 3:13:04, time: 1.784, data_time: 0.091, memory: 14441, decode.loss_ce: 0.0742, decode.acc_seg: 97.1725, loss: 0.0742
2022-09-17 08:06:21,867 - mmseg - INFO - Iter [3700/10000]	lr: 5.000e-05, eta: 3:11:31, time: 1.799, data_time: 0.108, memory: 14441, decode.loss_ce: 0.0653, decode.acc_seg: 97.5232, loss: 0.0653
2022-09-17 08:07:51,227 - mmseg - INFO - Iter [3750/10000]	lr: 5.000e-05, eta: 3:09:57, time: 1.787, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0573, decode.acc_seg: 97.9084, loss: 0.0573
2022-09-17 08:09:20,629 - mmseg - INFO - Iter [3800/10000]	lr: 5.000e-05, eta: 3:08:23, time: 1.788, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0572, decode.acc_seg: 97.9196, loss: 0.0572
2022-09-17 08:10:50,177 - mmseg - INFO - Iter [3850/10000]	lr: 5.000e-05, eta: 3:06:49, time: 1.791, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0608, decode.acc_seg: 97.7121, loss: 0.0608
2022-09-17 08:12:19,894 - mmseg - INFO - Iter [3900/10000]	lr: 5.000e-05, eta: 3:05:15, time: 1.794, data_time: 0.102, memory: 14441, decode.loss_ce: 0.0640, decode.acc_seg: 97.6370, loss: 0.0640
2022-09-17 08:13:49,275 - mmseg - INFO - Iter [3950/10000]	lr: 5.000e-05, eta: 3:03:42, time: 1.788, data_time: 0.094, memory: 14441, decode.loss_ce: 0.0582, decode.acc_seg: 97.8456, loss: 0.0582
2022-09-17 08:15:19,015 - mmseg - INFO - Exp name: config.py
2022-09-17 08:15:19,015 - mmseg - INFO - Iter [4000/10000]	lr: 5.000e-05, eta: 3:02:09, time: 1.795, data_time: 0.105, memory: 14441, decode.loss_ce: 0.0555, decode.acc_seg: 97.9291, loss: 0.0555
2022-09-17 08:15:36,562 - mmseg - INFO - per class results:
2022-09-17 08:15:36,563 - mmseg - INFO - 
+----------------+-------+-------+
|     Class      |  Dice |  Acc  |
+----------------+-------+-------+
|   background   | 98.49 | 98.65 |
|     kidney     | 90.89 | 94.81 |
|    prostate    | 85.65 | 82.59 |
| largeintestine | 86.73 | 86.65 |
|     spleen     | 83.09 | 85.61 |
|      lung      | 16.52 | 10.93 |
+----------------+-------+-------+
2022-09-17 08:15:36,564 - mmseg - INFO - Summary:
2022-09-17 08:15:36,564 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc | mDice |  mAcc |
+-------+-------+-------+
| 97.26 | 76.89 | 76.54 |
+-------+-------+-------+
2022-09-17 08:15:36,564 - mmseg - INFO - Exp name: config.py
2022-09-17 08:15:36,565 - mmseg - INFO - Iter(val) [70]	aAcc: 0.9726, mDice: 0.7689, mAcc: 0.7654, Dice.background: 0.9849, Dice.kidney: 0.9089, Dice.prostate: 0.8565, Dice.largeintestine: 0.8673, Dice.spleen: 0.8309, Dice.lung: 0.1652, Acc.background: 0.9865, Acc.kidney: 0.9481, Acc.prostate: 0.8259, Acc.largeintestine: 0.8665, Acc.spleen: 0.8561, Acc.lung: 0.1093
2022-09-17 08:17:11,703 - mmseg - INFO - Iter [4050/10000]	lr: 5.000e-05, eta: 3:01:09, time: 2.254, data_time: 0.546, memory: 14441, decode.loss_ce: 0.0594, decode.acc_seg: 97.7920, loss: 0.0594
2022-09-17 08:18:41,507 - mmseg - INFO - Iter [4100/10000]	lr: 5.000e-05, eta: 2:59:36, time: 1.796, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0545, decode.acc_seg: 97.9580, loss: 0.0545
2022-09-17 08:20:11,201 - mmseg - INFO - Iter [4150/10000]	lr: 5.000e-05, eta: 2:58:02, time: 1.794, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0571, decode.acc_seg: 97.8659, loss: 0.0571
2022-09-17 08:21:40,629 - mmseg - INFO - Iter [4200/10000]	lr: 5.000e-05, eta: 2:56:28, time: 1.789, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0548, decode.acc_seg: 97.9203, loss: 0.0548
2022-09-17 08:23:10,703 - mmseg - INFO - Iter [4250/10000]	lr: 5.000e-05, eta: 2:54:55, time: 1.801, data_time: 0.108, memory: 14441, decode.loss_ce: 0.0518, decode.acc_seg: 98.0232, loss: 0.0518
2022-09-17 08:24:39,758 - mmseg - INFO - Iter [4300/10000]	lr: 5.000e-05, eta: 2:53:21, time: 1.781, data_time: 0.100, memory: 14441, decode.loss_ce: 0.0505, decode.acc_seg: 98.0939, loss: 0.0505
2022-09-17 08:26:09,246 - mmseg - INFO - Iter [4350/10000]	lr: 5.000e-05, eta: 2:51:48, time: 1.790, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0513, decode.acc_seg: 98.0485, loss: 0.0513
2022-09-17 08:27:39,009 - mmseg - INFO - Iter [4400/10000]	lr: 5.000e-05, eta: 2:50:14, time: 1.795, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0508, decode.acc_seg: 98.0613, loss: 0.0508
2022-09-17 08:29:08,512 - mmseg - INFO - Iter [4450/10000]	lr: 5.000e-05, eta: 2:48:41, time: 1.790, data_time: 0.093, memory: 14441, decode.loss_ce: 0.0528, decode.acc_seg: 97.9558, loss: 0.0528
2022-09-17 08:30:37,967 - mmseg - INFO - Iter [4500/10000]	lr: 5.000e-05, eta: 2:47:08, time: 1.789, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0490, decode.acc_seg: 98.0979, loss: 0.0490
2022-09-17 08:32:07,030 - mmseg - INFO - Iter [4550/10000]	lr: 5.000e-05, eta: 2:45:34, time: 1.781, data_time: 0.093, memory: 14441, decode.loss_ce: 0.0523, decode.acc_seg: 98.0139, loss: 0.0523
2022-09-17 08:33:36,146 - mmseg - INFO - Iter [4600/10000]	lr: 5.000e-05, eta: 2:44:01, time: 1.782, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0667, decode.acc_seg: 97.3668, loss: 0.0667
2022-09-17 08:35:10,914 - mmseg - INFO - Iter [4650/10000]	lr: 5.000e-05, eta: 2:42:34, time: 1.895, data_time: 0.188, memory: 14441, decode.loss_ce: 0.0634, decode.acc_seg: 97.5609, loss: 0.0634
2022-09-17 08:36:40,607 - mmseg - INFO - Iter [4700/10000]	lr: 5.000e-05, eta: 2:41:01, time: 1.794, data_time: 0.105, memory: 14441, decode.loss_ce: 0.0545, decode.acc_seg: 97.8472, loss: 0.0545
2022-09-17 08:38:09,812 - mmseg - INFO - Iter [4750/10000]	lr: 5.000e-05, eta: 2:39:28, time: 1.784, data_time: 0.094, memory: 14441, decode.loss_ce: 0.0497, decode.acc_seg: 98.0756, loss: 0.0497
2022-09-17 08:39:39,368 - mmseg - INFO - Iter [4800/10000]	lr: 5.000e-05, eta: 2:37:55, time: 1.791, data_time: 0.102, memory: 14441, decode.loss_ce: 0.0531, decode.acc_seg: 97.9566, loss: 0.0531
2022-09-17 08:41:09,056 - mmseg - INFO - Iter [4850/10000]	lr: 5.000e-05, eta: 2:36:22, time: 1.794, data_time: 0.101, memory: 14441, decode.loss_ce: 0.0516, decode.acc_seg: 97.9860, loss: 0.0516
2022-09-17 08:42:38,668 - mmseg - INFO - Iter [4900/10000]	lr: 5.000e-05, eta: 2:34:49, time: 1.792, data_time: 0.104, memory: 14441, decode.loss_ce: 0.0520, decode.acc_seg: 97.9470, loss: 0.0520
2022-09-17 08:44:08,215 - mmseg - INFO - Iter [4950/10000]	lr: 5.000e-05, eta: 2:33:17, time: 1.791, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0497, decode.acc_seg: 98.1170, loss: 0.0497
2022-09-17 08:45:37,622 - mmseg - INFO - Exp name: config.py
2022-09-17 08:45:37,622 - mmseg - INFO - Iter [5000/10000]	lr: 5.000e-05, eta: 2:31:44, time: 1.788, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0570, decode.acc_seg: 97.7892, loss: 0.0570
2022-09-17 08:45:55,422 - mmseg - INFO - per class results:
2022-09-17 08:45:55,423 - mmseg - INFO - 
+----------------+-------+-------+
|     Class      |  Dice |  Acc  |
+----------------+-------+-------+
|   background   | 98.53 | 98.68 |
|     kidney     | 92.25 | 93.06 |
|    prostate    | 86.91 | 86.17 |
| largeintestine | 86.83 | 84.65 |
|     spleen     | 82.75 | 85.62 |
|      lung      |  7.91 |  5.56 |
+----------------+-------+-------+
2022-09-17 08:45:55,424 - mmseg - INFO - Summary:
2022-09-17 08:45:55,424 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc | mDice |  mAcc |
+-------+-------+-------+
| 97.33 | 75.86 | 75.62 |
+-------+-------+-------+
2022-09-17 08:45:55,425 - mmseg - INFO - Exp name: config.py
2022-09-17 08:45:55,425 - mmseg - INFO - Iter(val) [70]	aAcc: 0.9733, mDice: 0.7586, mAcc: 0.7562, Dice.background: 0.9853, Dice.kidney: 0.9225, Dice.prostate: 0.8691, Dice.largeintestine: 0.8683, Dice.spleen: 0.8275, Dice.lung: 0.0791, Acc.background: 0.9868, Acc.kidney: 0.9306, Acc.prostate: 0.8617, Acc.largeintestine: 0.8465, Acc.spleen: 0.8562, Acc.lung: 0.0556
2022-09-17 08:47:27,214 - mmseg - INFO - Iter [5050/10000]	lr: 5.000e-05, eta: 2:30:31, time: 2.192, data_time: 0.464, memory: 14441, decode.loss_ce: 0.0553, decode.acc_seg: 97.8701, loss: 0.0553
2022-09-17 08:48:57,879 - mmseg - INFO - Iter [5100/10000]	lr: 5.000e-05, eta: 2:28:59, time: 1.813, data_time: 0.106, memory: 14441, decode.loss_ce: 0.0576, decode.acc_seg: 97.7333, loss: 0.0576
2022-09-17 08:50:27,330 - mmseg - INFO - Iter [5150/10000]	lr: 5.000e-05, eta: 2:27:27, time: 1.789, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0512, decode.acc_seg: 97.9947, loss: 0.0512
2022-09-17 08:52:01,731 - mmseg - INFO - Iter [5200/10000]	lr: 5.000e-05, eta: 2:25:58, time: 1.888, data_time: 0.181, memory: 14441, decode.loss_ce: 0.0504, decode.acc_seg: 98.0179, loss: 0.0504
2022-09-17 08:53:31,651 - mmseg - INFO - Iter [5250/10000]	lr: 5.000e-05, eta: 2:24:26, time: 1.798, data_time: 0.101, memory: 14441, decode.loss_ce: 0.0524, decode.acc_seg: 97.9743, loss: 0.0524
2022-09-17 08:55:02,542 - mmseg - INFO - Iter [5300/10000]	lr: 5.000e-05, eta: 2:22:54, time: 1.818, data_time: 0.109, memory: 14441, decode.loss_ce: 0.0501, decode.acc_seg: 98.0480, loss: 0.0501
2022-09-17 08:56:32,160 - mmseg - INFO - Iter [5350/10000]	lr: 5.000e-05, eta: 2:21:22, time: 1.792, data_time: 0.100, memory: 14441, decode.loss_ce: 0.0501, decode.acc_seg: 98.0397, loss: 0.0501
2022-09-17 08:58:02,778 - mmseg - INFO - Iter [5400/10000]	lr: 5.000e-05, eta: 2:19:50, time: 1.812, data_time: 0.116, memory: 14441, decode.loss_ce: 0.0467, decode.acc_seg: 98.1794, loss: 0.0467
2022-09-17 08:59:32,349 - mmseg - INFO - Iter [5450/10000]	lr: 5.000e-05, eta: 2:18:17, time: 1.791, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0442, decode.acc_seg: 98.2454, loss: 0.0442
2022-09-17 09:01:01,737 - mmseg - INFO - Iter [5500/10000]	lr: 5.000e-05, eta: 2:16:45, time: 1.788, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0453, decode.acc_seg: 98.2118, loss: 0.0453
2022-09-17 09:02:31,474 - mmseg - INFO - Iter [5550/10000]	lr: 5.000e-05, eta: 2:15:13, time: 1.795, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0503, decode.acc_seg: 98.0385, loss: 0.0503
2022-09-17 09:04:01,230 - mmseg - INFO - Iter [5600/10000]	lr: 5.000e-05, eta: 2:13:40, time: 1.795, data_time: 0.100, memory: 14441, decode.loss_ce: 0.0462, decode.acc_seg: 98.1829, loss: 0.0462
2022-09-17 09:05:30,716 - mmseg - INFO - Iter [5650/10000]	lr: 5.000e-05, eta: 2:12:08, time: 1.790, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0503, decode.acc_seg: 97.9845, loss: 0.0503
2022-09-17 09:07:00,478 - mmseg - INFO - Iter [5700/10000]	lr: 5.000e-05, eta: 2:10:36, time: 1.795, data_time: 0.101, memory: 14441, decode.loss_ce: 0.0529, decode.acc_seg: 97.8623, loss: 0.0529
2022-09-17 09:08:30,086 - mmseg - INFO - Iter [5750/10000]	lr: 5.000e-05, eta: 2:09:03, time: 1.792, data_time: 0.101, memory: 14441, decode.loss_ce: 0.0471, decode.acc_seg: 98.1236, loss: 0.0471
2022-09-17 09:10:04,778 - mmseg - INFO - Iter [5800/10000]	lr: 5.000e-05, eta: 2:07:35, time: 1.894, data_time: 0.183, memory: 14441, decode.loss_ce: 0.0473, decode.acc_seg: 98.1407, loss: 0.0473
2022-09-17 09:11:34,306 - mmseg - INFO - Iter [5850/10000]	lr: 5.000e-05, eta: 2:06:03, time: 1.791, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0445, decode.acc_seg: 98.2377, loss: 0.0445
2022-09-17 09:13:04,004 - mmseg - INFO - Iter [5900/10000]	lr: 5.000e-05, eta: 2:04:31, time: 1.794, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0465, decode.acc_seg: 98.1607, loss: 0.0465
2022-09-17 09:14:33,777 - mmseg - INFO - Iter [5950/10000]	lr: 5.000e-05, eta: 2:02:59, time: 1.795, data_time: 0.101, memory: 14441, decode.loss_ce: 0.0452, decode.acc_seg: 98.1982, loss: 0.0452
2022-09-17 09:16:03,608 - mmseg - INFO - Exp name: config.py
2022-09-17 09:16:03,609 - mmseg - INFO - Iter [6000/10000]	lr: 5.000e-05, eta: 2:01:27, time: 1.797, data_time: 0.105, memory: 14441, decode.loss_ce: 0.0429, decode.acc_seg: 98.2790, loss: 0.0429
2022-09-17 09:16:21,058 - mmseg - INFO - per class results:
2022-09-17 09:16:21,059 - mmseg - INFO - 
+----------------+-------+-------+
|     Class      |  Dice |  Acc  |
+----------------+-------+-------+
|   background   | 98.59 | 98.82 |
|     kidney     | 92.03 | 92.45 |
|    prostate    | 87.74 | 87.95 |
| largeintestine | 86.97 | 83.65 |
|     spleen     | 82.32 | 78.22 |
|      lung      | 23.98 |  19.7 |
+----------------+-------+-------+
2022-09-17 09:16:21,059 - mmseg - INFO - Summary:
2022-09-17 09:16:21,060 - mmseg - INFO - 
+-------+-------+------+
|  aAcc | mDice | mAcc |
+-------+-------+------+
| 97.43 |  78.6 | 76.8 |
+-------+-------+------+
2022-09-17 09:16:21,060 - mmseg - INFO - Exp name: config.py
2022-09-17 09:16:21,060 - mmseg - INFO - Iter(val) [70]	aAcc: 0.9743, mDice: 0.7860, mAcc: 0.7680, Dice.background: 0.9859, Dice.kidney: 0.9203, Dice.prostate: 0.8774, Dice.largeintestine: 0.8697, Dice.spleen: 0.8232, Dice.lung: 0.2398, Acc.background: 0.9882, Acc.kidney: 0.9245, Acc.prostate: 0.8795, Acc.largeintestine: 0.8365, Acc.spleen: 0.7822, Acc.lung: 0.1970
2022-09-17 09:17:51,845 - mmseg - INFO - Iter [6050/10000]	lr: 5.000e-05, eta: 2:00:07, time: 2.165, data_time: 0.455, memory: 14441, decode.loss_ce: 0.0466, decode.acc_seg: 98.1448, loss: 0.0466
2022-09-17 09:19:22,177 - mmseg - INFO - Iter [6100/10000]	lr: 5.000e-05, eta: 1:58:35, time: 1.807, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0449, decode.acc_seg: 98.2213, loss: 0.0449
2022-09-17 09:20:51,362 - mmseg - INFO - Iter [6150/10000]	lr: 5.000e-05, eta: 1:57:02, time: 1.784, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0430, decode.acc_seg: 98.2691, loss: 0.0430
2022-09-17 09:22:20,812 - mmseg - INFO - Iter [6200/10000]	lr: 5.000e-05, eta: 1:55:30, time: 1.789, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0464, decode.acc_seg: 98.1363, loss: 0.0464
2022-09-17 09:23:50,547 - mmseg - INFO - Iter [6250/10000]	lr: 5.000e-05, eta: 1:53:58, time: 1.795, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0440, decode.acc_seg: 98.2226, loss: 0.0440
2022-09-17 09:25:20,047 - mmseg - INFO - Iter [6300/10000]	lr: 5.000e-05, eta: 1:52:26, time: 1.790, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0430, decode.acc_seg: 98.2863, loss: 0.0430
2022-09-17 09:26:55,083 - mmseg - INFO - Iter [6350/10000]	lr: 5.000e-05, eta: 1:50:57, time: 1.901, data_time: 0.200, memory: 14441, decode.loss_ce: 0.0488, decode.acc_seg: 98.0173, loss: 0.0488
2022-09-17 09:28:25,114 - mmseg - INFO - Iter [6400/10000]	lr: 5.000e-05, eta: 1:49:25, time: 1.801, data_time: 0.103, memory: 14441, decode.loss_ce: 0.0415, decode.acc_seg: 98.3355, loss: 0.0415
2022-09-17 09:29:54,747 - mmseg - INFO - Iter [6450/10000]	lr: 5.000e-05, eta: 1:47:53, time: 1.793, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0415, decode.acc_seg: 98.3297, loss: 0.0415
2022-09-17 09:31:24,206 - mmseg - INFO - Iter [6500/10000]	lr: 5.000e-05, eta: 1:46:21, time: 1.789, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0463, decode.acc_seg: 98.1539, loss: 0.0463
2022-09-17 09:32:53,764 - mmseg - INFO - Iter [6550/10000]	lr: 5.000e-05, eta: 1:44:49, time: 1.791, data_time: 0.101, memory: 14441, decode.loss_ce: 0.0453, decode.acc_seg: 98.2223, loss: 0.0453
2022-09-17 09:34:23,197 - mmseg - INFO - Iter [6600/10000]	lr: 5.000e-05, eta: 1:43:17, time: 1.789, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0432, decode.acc_seg: 98.2698, loss: 0.0432
2022-09-17 09:35:52,669 - mmseg - INFO - Iter [6650/10000]	lr: 5.000e-05, eta: 1:41:45, time: 1.789, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0416, decode.acc_seg: 98.3330, loss: 0.0416
2022-09-17 09:37:22,345 - mmseg - INFO - Iter [6700/10000]	lr: 5.000e-05, eta: 1:40:13, time: 1.793, data_time: 0.090, memory: 14441, decode.loss_ce: 0.0432, decode.acc_seg: 98.2700, loss: 0.0432
2022-09-17 09:38:51,899 - mmseg - INFO - Iter [6750/10000]	lr: 5.000e-05, eta: 1:38:41, time: 1.791, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0432, decode.acc_seg: 98.2769, loss: 0.0432
2022-09-17 09:40:21,402 - mmseg - INFO - Iter [6800/10000]	lr: 5.000e-05, eta: 1:37:09, time: 1.790, data_time: 0.093, memory: 14441, decode.loss_ce: 0.0430, decode.acc_seg: 98.3020, loss: 0.0430
2022-09-17 09:41:50,855 - mmseg - INFO - Iter [6850/10000]	lr: 5.000e-05, eta: 1:35:37, time: 1.789, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0429, decode.acc_seg: 98.2790, loss: 0.0429
2022-09-17 09:43:20,428 - mmseg - INFO - Iter [6900/10000]	lr: 5.000e-05, eta: 1:34:06, time: 1.791, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0454, decode.acc_seg: 98.2120, loss: 0.0454
2022-09-17 09:44:55,920 - mmseg - INFO - Iter [6950/10000]	lr: 5.000e-05, eta: 1:32:37, time: 1.910, data_time: 0.198, memory: 14441, decode.loss_ce: 0.0434, decode.acc_seg: 98.2423, loss: 0.0434
2022-09-17 09:46:25,604 - mmseg - INFO - Exp name: config.py
2022-09-17 09:46:25,604 - mmseg - INFO - Iter [7000/10000]	lr: 5.000e-05, eta: 1:31:05, time: 1.794, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0420, decode.acc_seg: 98.3027, loss: 0.0420
2022-09-17 09:46:43,166 - mmseg - INFO - per class results:
2022-09-17 09:46:43,167 - mmseg - INFO - 
+----------------+-------+-------+
|     Class      |  Dice |  Acc  |
+----------------+-------+-------+
|   background   | 98.62 | 98.67 |
|     kidney     | 92.36 | 91.33 |
|    prostate    | 88.59 | 89.75 |
| largeintestine | 87.83 | 87.26 |
|     spleen     | 83.29 | 81.06 |
|      lung      | 19.94 |  17.4 |
+----------------+-------+-------+
2022-09-17 09:46:43,167 - mmseg - INFO - Summary:
2022-09-17 09:46:43,168 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc | mDice |  mAcc |
+-------+-------+-------+
| 97.51 | 78.44 | 77.58 |
+-------+-------+-------+
2022-09-17 09:46:43,168 - mmseg - INFO - Exp name: config.py
2022-09-17 09:46:43,169 - mmseg - INFO - Iter(val) [70]	aAcc: 0.9751, mDice: 0.7844, mAcc: 0.7758, Dice.background: 0.9862, Dice.kidney: 0.9236, Dice.prostate: 0.8859, Dice.largeintestine: 0.8783, Dice.spleen: 0.8329, Dice.lung: 0.1994, Acc.background: 0.9867, Acc.kidney: 0.9133, Acc.prostate: 0.8975, Acc.largeintestine: 0.8726, Acc.spleen: 0.8106, Acc.lung: 0.1740
2022-09-17 09:51:25,964 - mmseg - INFO - Iter [7050/10000]	lr: 5.000e-05, eta: 1:31:01, time: 6.007, data_time: 0.447, memory: 14441, decode.loss_ce: 0.0443, decode.acc_seg: 98.1990, loss: 0.0443
2022-09-17 09:56:00,785 - mmseg - INFO - Iter [7100/10000]	lr: 5.000e-05, eta: 1:30:43, time: 5.496, data_time: 0.092, memory: 14441, decode.loss_ce: 0.0418, decode.acc_seg: 98.2956, loss: 0.0418
2022-09-17 10:00:35,633 - mmseg - INFO - Iter [7150/10000]	lr: 5.000e-05, eta: 1:30:22, time: 5.497, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0411, decode.acc_seg: 98.3296, loss: 0.0411
2022-09-17 10:05:10,661 - mmseg - INFO - Iter [7200/10000]	lr: 5.000e-05, eta: 1:29:56, time: 5.501, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0407, decode.acc_seg: 98.3599, loss: 0.0407
2022-09-17 10:09:45,608 - mmseg - INFO - Iter [7250/10000]	lr: 5.000e-05, eta: 1:29:28, time: 5.499, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0419, decode.acc_seg: 98.3122, loss: 0.0419
2022-09-17 10:14:21,142 - mmseg - INFO - Iter [7300/10000]	lr: 5.000e-05, eta: 1:28:56, time: 5.511, data_time: 0.105, memory: 14441, decode.loss_ce: 0.0416, decode.acc_seg: 98.3342, loss: 0.0416
2022-09-17 10:18:56,863 - mmseg - INFO - Iter [7350/10000]	lr: 5.000e-05, eta: 1:28:21, time: 5.514, data_time: 0.109, memory: 14441, decode.loss_ce: 0.0450, decode.acc_seg: 98.1987, loss: 0.0450
2022-09-17 10:23:32,620 - mmseg - INFO - Iter [7400/10000]	lr: 5.000e-05, eta: 1:27:43, time: 5.515, data_time: 0.108, memory: 14441, decode.loss_ce: 0.0479, decode.acc_seg: 98.0690, loss: 0.0479
2022-09-17 10:28:08,249 - mmseg - INFO - Iter [7450/10000]	lr: 5.000e-05, eta: 1:27:01, time: 5.513, data_time: 0.109, memory: 14441, decode.loss_ce: 0.0410, decode.acc_seg: 98.3242, loss: 0.0410
2022-09-17 10:32:48,601 - mmseg - INFO - Iter [7500/10000]	lr: 5.000e-05, eta: 1:26:18, time: 5.607, data_time: 0.204, memory: 14441, decode.loss_ce: 0.0505, decode.acc_seg: 97.9644, loss: 0.0505
2022-09-17 10:37:24,239 - mmseg - INFO - Iter [7550/10000]	lr: 5.000e-05, eta: 1:25:30, time: 5.513, data_time: 0.110, memory: 14441, decode.loss_ce: 0.0436, decode.acc_seg: 98.2622, loss: 0.0436
2022-09-17 10:42:00,027 - mmseg - INFO - Iter [7600/10000]	lr: 5.000e-05, eta: 1:24:40, time: 5.516, data_time: 0.115, memory: 14441, decode.loss_ce: 0.0452, decode.acc_seg: 98.1758, loss: 0.0452
2022-09-17 10:46:35,982 - mmseg - INFO - Iter [7650/10000]	lr: 5.000e-05, eta: 1:23:46, time: 5.519, data_time: 0.112, memory: 14441, decode.loss_ce: 0.0429, decode.acc_seg: 98.2851, loss: 0.0429
2022-09-17 10:51:11,702 - mmseg - INFO - Iter [7700/10000]	lr: 5.000e-05, eta: 1:22:49, time: 5.514, data_time: 0.110, memory: 14441, decode.loss_ce: 0.0403, decode.acc_seg: 98.3579, loss: 0.0403
2022-09-17 10:55:47,346 - mmseg - INFO - Iter [7750/10000]	lr: 5.000e-05, eta: 1:21:50, time: 5.513, data_time: 0.112, memory: 14441, decode.loss_ce: 0.0417, decode.acc_seg: 98.3524, loss: 0.0417
2022-09-17 11:00:22,653 - mmseg - INFO - Iter [7800/10000]	lr: 5.000e-05, eta: 1:20:48, time: 5.506, data_time: 0.102, memory: 14441, decode.loss_ce: 0.0427, decode.acc_seg: 98.3012, loss: 0.0427
2022-09-17 11:04:58,365 - mmseg - INFO - Iter [7850/10000]	lr: 5.000e-05, eta: 1:19:43, time: 5.514, data_time: 0.109, memory: 14441, decode.loss_ce: 0.0411, decode.acc_seg: 98.3221, loss: 0.0411
2022-09-17 11:09:33,984 - mmseg - INFO - Iter [7900/10000]	lr: 5.000e-05, eta: 1:18:35, time: 5.512, data_time: 0.106, memory: 14441, decode.loss_ce: 0.0388, decode.acc_seg: 98.4175, loss: 0.0388
2022-09-17 11:14:09,633 - mmseg - INFO - Iter [7950/10000]	lr: 5.000e-05, eta: 1:17:25, time: 5.513, data_time: 0.104, memory: 14441, decode.loss_ce: 0.0407, decode.acc_seg: 98.3653, loss: 0.0407
2022-09-17 11:18:45,411 - mmseg - INFO - Exp name: config.py
2022-09-17 11:18:45,411 - mmseg - INFO - Iter [8000/10000]	lr: 5.000e-05, eta: 1:16:13, time: 5.516, data_time: 0.109, memory: 14441, decode.loss_ce: 0.0378, decode.acc_seg: 98.4532, loss: 0.0378
2022-09-17 11:19:02,414 - mmseg - INFO - per class results:
2022-09-17 11:19:02,415 - mmseg - INFO - 
+----------------+-------+-------+
|     Class      |  Dice |  Acc  |
+----------------+-------+-------+
|   background   | 98.33 | 98.57 |
|     kidney     |  91.8 | 93.23 |
|    prostate    | 80.95 | 75.34 |
| largeintestine | 87.64 | 89.13 |
|     spleen     |  82.2 | 82.41 |
|      lung      | 18.45 | 15.61 |
+----------------+-------+-------+
2022-09-17 11:19:02,415 - mmseg - INFO - Summary:
2022-09-17 11:19:02,415 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc | mDice |  mAcc |
+-------+-------+-------+
| 96.96 | 76.56 | 75.71 |
+-------+-------+-------+
2022-09-17 11:19:02,416 - mmseg - INFO - Exp name: config.py
2022-09-17 11:19:02,416 - mmseg - INFO - Iter(val) [70]	aAcc: 0.9696, mDice: 0.7656, mAcc: 0.7571, Dice.background: 0.9833, Dice.kidney: 0.9180, Dice.prostate: 0.8095, Dice.largeintestine: 0.8764, Dice.spleen: 0.8220, Dice.lung: 0.1845, Acc.background: 0.9857, Acc.kidney: 0.9323, Acc.prostate: 0.7534, Acc.largeintestine: 0.8913, Acc.spleen: 0.8241, Acc.lung: 0.1561
2022-09-17 11:23:37,256 - mmseg - INFO - Iter [8050/10000]	lr: 5.000e-05, eta: 1:15:01, time: 5.837, data_time: 0.437, memory: 14441, decode.loss_ce: 0.0404, decode.acc_seg: 98.3525, loss: 0.0404
2022-09-17 11:28:15,982 - mmseg - INFO - Iter [8100/10000]	lr: 5.000e-05, eta: 1:13:44, time: 5.575, data_time: 0.173, memory: 14441, decode.loss_ce: 0.0379, decode.acc_seg: 98.4589, loss: 0.0379
2022-09-17 11:32:50,731 - mmseg - INFO - Iter [8150/10000]	lr: 5.000e-05, eta: 1:12:24, time: 5.495, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0367, decode.acc_seg: 98.4929, loss: 0.0367
2022-09-17 11:37:25,559 - mmseg - INFO - Iter [8200/10000]	lr: 5.000e-05, eta: 1:11:01, time: 5.497, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0399, decode.acc_seg: 98.3702, loss: 0.0399
2022-09-17 11:42:00,393 - mmseg - INFO - Iter [8250/10000]	lr: 5.000e-05, eta: 1:09:36, time: 5.497, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0404, decode.acc_seg: 98.3489, loss: 0.0404
2022-09-17 11:46:35,050 - mmseg - INFO - Iter [8300/10000]	lr: 5.000e-05, eta: 1:08:08, time: 5.493, data_time: 0.091, memory: 14441, decode.loss_ce: 0.0363, decode.acc_seg: 98.5125, loss: 0.0363
2022-09-17 11:51:10,281 - mmseg - INFO - Iter [8350/10000]	lr: 5.000e-05, eta: 1:06:38, time: 5.505, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0418, decode.acc_seg: 98.2784, loss: 0.0418
2022-09-17 11:55:45,315 - mmseg - INFO - Iter [8400/10000]	lr: 5.000e-05, eta: 1:05:07, time: 5.501, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0389, decode.acc_seg: 98.4057, loss: 0.0389
2022-09-17 12:00:20,602 - mmseg - INFO - Iter [8450/10000]	lr: 5.000e-05, eta: 1:03:33, time: 5.506, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0372, decode.acc_seg: 98.4704, loss: 0.0372
2022-09-17 12:04:55,578 - mmseg - INFO - Iter [8500/10000]	lr: 5.000e-05, eta: 1:01:56, time: 5.499, data_time: 0.094, memory: 14441, decode.loss_ce: 0.0397, decode.acc_seg: 98.3483, loss: 0.0397
2022-09-17 12:09:30,834 - mmseg - INFO - Iter [8550/10000]	lr: 5.000e-05, eta: 1:00:18, time: 5.505, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0404, decode.acc_seg: 98.3808, loss: 0.0404
2022-09-17 12:14:05,695 - mmseg - INFO - Iter [8600/10000]	lr: 5.000e-05, eta: 0:58:38, time: 5.497, data_time: 0.093, memory: 14441, decode.loss_ce: 0.0388, decode.acc_seg: 98.4078, loss: 0.0388
2022-09-17 12:18:44,926 - mmseg - INFO - Iter [8650/10000]	lr: 5.000e-05, eta: 0:56:56, time: 5.585, data_time: 0.179, memory: 14441, decode.loss_ce: 0.0359, decode.acc_seg: 98.5163, loss: 0.0359
2022-09-17 12:23:20,048 - mmseg - INFO - Iter [8700/10000]	lr: 5.000e-05, eta: 0:55:12, time: 5.502, data_time: 0.096, memory: 14441, decode.loss_ce: 0.0353, decode.acc_seg: 98.5432, loss: 0.0353
2022-09-17 12:27:55,278 - mmseg - INFO - Iter [8750/10000]	lr: 5.000e-05, eta: 0:53:26, time: 5.505, data_time: 0.100, memory: 14441, decode.loss_ce: 0.0366, decode.acc_seg: 98.5081, loss: 0.0366
2022-09-17 12:32:30,540 - mmseg - INFO - Iter [8800/10000]	lr: 5.000e-05, eta: 0:51:37, time: 5.505, data_time: 0.103, memory: 14441, decode.loss_ce: 0.0375, decode.acc_seg: 98.4715, loss: 0.0375
2022-09-17 12:37:05,539 - mmseg - INFO - Iter [8850/10000]	lr: 5.000e-05, eta: 0:49:47, time: 5.500, data_time: 0.100, memory: 14441, decode.loss_ce: 0.0386, decode.acc_seg: 98.3991, loss: 0.0386
2022-09-17 12:41:40,714 - mmseg - INFO - Iter [8900/10000]	lr: 5.000e-05, eta: 0:47:55, time: 5.503, data_time: 0.102, memory: 14441, decode.loss_ce: 0.0336, decode.acc_seg: 98.6088, loss: 0.0336
2022-09-17 12:46:15,691 - mmseg - INFO - Iter [8950/10000]	lr: 5.000e-05, eta: 0:46:01, time: 5.500, data_time: 0.094, memory: 14441, decode.loss_ce: 0.0353, decode.acc_seg: 98.5359, loss: 0.0353
2022-09-17 12:50:51,084 - mmseg - INFO - Exp name: config.py
2022-09-17 12:50:51,085 - mmseg - INFO - Iter [9000/10000]	lr: 5.000e-05, eta: 0:44:06, time: 5.508, data_time: 0.102, memory: 14441, decode.loss_ce: 0.0361, decode.acc_seg: 98.5250, loss: 0.0361
2022-09-17 12:51:08,283 - mmseg - INFO - per class results:
2022-09-17 12:51:08,284 - mmseg - INFO - 
+----------------+-------+-------+
|     Class      |  Dice |  Acc  |
+----------------+-------+-------+
|   background   | 98.58 |  98.7 |
|     kidney     | 92.57 | 93.45 |
|    prostate    | 87.68 | 88.03 |
| largeintestine | 87.66 | 85.04 |
|     spleen     | 82.01 | 81.24 |
|      lung      | 20.44 | 18.19 |
+----------------+-------+-------+
2022-09-17 12:51:08,284 - mmseg - INFO - Summary:
2022-09-17 12:51:08,284 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc | mDice |  mAcc |
+-------+-------+-------+
| 97.42 | 78.16 | 77.44 |
+-------+-------+-------+
2022-09-17 12:51:08,285 - mmseg - INFO - Exp name: config.py
2022-09-17 12:51:08,285 - mmseg - INFO - Iter(val) [70]	aAcc: 0.9742, mDice: 0.7816, mAcc: 0.7744, Dice.background: 0.9858, Dice.kidney: 0.9257, Dice.prostate: 0.8768, Dice.largeintestine: 0.8766, Dice.spleen: 0.8201, Dice.lung: 0.2044, Acc.background: 0.9870, Acc.kidney: 0.9345, Acc.prostate: 0.8803, Acc.largeintestine: 0.8504, Acc.spleen: 0.8124, Acc.lung: 0.1819
2022-09-17 12:55:43,346 - mmseg - INFO - Iter [9050/10000]	lr: 5.000e-05, eta: 0:42:10, time: 5.845, data_time: 0.440, memory: 14441, decode.loss_ce: 0.0350, decode.acc_seg: 98.5469, loss: 0.0350
2022-09-17 13:00:18,430 - mmseg - INFO - Iter [9100/10000]	lr: 5.000e-05, eta: 0:40:11, time: 5.502, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0377, decode.acc_seg: 98.4452, loss: 0.0377
2022-09-17 13:04:53,930 - mmseg - INFO - Iter [9150/10000]	lr: 5.000e-05, eta: 0:38:10, time: 5.510, data_time: 0.106, memory: 14441, decode.loss_ce: 0.0341, decode.acc_seg: 98.5864, loss: 0.0341
2022-09-17 13:09:28,752 - mmseg - INFO - Iter [9200/10000]	lr: 5.000e-05, eta: 0:36:08, time: 5.496, data_time: 0.094, memory: 14441, decode.loss_ce: 0.0416, decode.acc_seg: 98.3145, loss: 0.0416
2022-09-17 13:14:08,384 - mmseg - INFO - Iter [9250/10000]	lr: 5.000e-05, eta: 0:34:04, time: 5.593, data_time: 0.190, memory: 14441, decode.loss_ce: 0.0377, decode.acc_seg: 98.4353, loss: 0.0377
2022-09-17 13:18:43,352 - mmseg - INFO - Iter [9300/10000]	lr: 5.000e-05, eta: 0:31:58, time: 5.499, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0345, decode.acc_seg: 98.5718, loss: 0.0345
2022-09-17 13:23:18,174 - mmseg - INFO - Iter [9350/10000]	lr: 5.000e-05, eta: 0:29:51, time: 5.496, data_time: 0.095, memory: 14441, decode.loss_ce: 0.0377, decode.acc_seg: 98.4736, loss: 0.0377
2022-09-17 13:27:53,790 - mmseg - INFO - Iter [9400/10000]	lr: 5.000e-05, eta: 0:27:42, time: 5.512, data_time: 0.105, memory: 14441, decode.loss_ce: 0.0425, decode.acc_seg: 98.2778, loss: 0.0425
2022-09-17 13:32:29,097 - mmseg - INFO - Iter [9450/10000]	lr: 5.000e-05, eta: 0:25:31, time: 5.506, data_time: 0.099, memory: 14441, decode.loss_ce: 0.0602, decode.acc_seg: 97.6472, loss: 0.0602
2022-09-17 13:37:04,417 - mmseg - INFO - Iter [9500/10000]	lr: 5.000e-05, eta: 0:23:19, time: 5.506, data_time: 0.103, memory: 14441, decode.loss_ce: 0.0430, decode.acc_seg: 98.2501, loss: 0.0430
2022-09-17 13:41:39,780 - mmseg - INFO - Iter [9550/10000]	lr: 5.000e-05, eta: 0:21:05, time: 5.507, data_time: 0.105, memory: 14441, decode.loss_ce: 0.0396, decode.acc_seg: 98.3829, loss: 0.0396
2022-09-17 13:46:14,919 - mmseg - INFO - Iter [9600/10000]	lr: 5.000e-05, eta: 0:18:50, time: 5.503, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0460, decode.acc_seg: 98.2752, loss: 0.0460
2022-09-17 13:50:50,061 - mmseg - INFO - Iter [9650/10000]	lr: 5.000e-05, eta: 0:16:34, time: 5.503, data_time: 0.098, memory: 14441, decode.loss_ce: 0.0354, decode.acc_seg: 98.5535, loss: 0.0354
2022-09-17 13:55:24,846 - mmseg - INFO - Iter [9700/10000]	lr: 5.000e-05, eta: 0:14:16, time: 5.496, data_time: 0.093, memory: 14441, decode.loss_ce: 0.0378, decode.acc_seg: 98.4404, loss: 0.0378
2022-09-17 13:59:59,854 - mmseg - INFO - Iter [9750/10000]	lr: 5.000e-05, eta: 0:11:57, time: 5.500, data_time: 0.101, memory: 14441, decode.loss_ce: 0.0377, decode.acc_seg: 98.4540, loss: 0.0377
2022-09-17 14:04:38,785 - mmseg - INFO - Iter [9800/10000]	lr: 5.000e-05, eta: 0:09:36, time: 5.579, data_time: 0.176, memory: 14441, decode.loss_ce: 0.0375, decode.acc_seg: 98.4500, loss: 0.0375
2022-09-17 14:09:13,764 - mmseg - INFO - Iter [9850/10000]	lr: 5.000e-05, eta: 0:07:14, time: 5.500, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0389, decode.acc_seg: 98.3921, loss: 0.0389
2022-09-17 14:13:48,255 - mmseg - INFO - Iter [9900/10000]	lr: 5.000e-05, eta: 0:04:50, time: 5.490, data_time: 0.088, memory: 14441, decode.loss_ce: 0.0364, decode.acc_seg: 98.4767, loss: 0.0364
2022-09-17 14:18:23,084 - mmseg - INFO - Iter [9950/10000]	lr: 5.000e-05, eta: 0:02:26, time: 5.497, data_time: 0.097, memory: 14441, decode.loss_ce: 0.0325, decode.acc_seg: 98.6592, loss: 0.0325
2022-09-17 14:22:57,952 - mmseg - INFO - Saving checkpoint at 10000 iterations
2022-09-17 14:23:02,625 - mmseg - INFO - Exp name: config.py
2022-09-17 14:23:02,648 - mmseg - INFO - Iter [10000/10000]	lr: 5.000e-05, eta: 0:00:00, time: 5.591, data_time: 0.094, memory: 14441, decode.loss_ce: 0.0365, decode.acc_seg: 98.4927, loss: 0.0365
2022-09-17 14:23:22,734 - mmseg - INFO - per class results:
2022-09-17 14:23:22,736 - mmseg - INFO - 
+----------------+-------+-------+
|     Class      |  Dice |  Acc  |
+----------------+-------+-------+
|   background   | 98.62 | 98.79 |
|     kidney     | 92.87 | 93.88 |
|    prostate    | 87.85 |  87.5 |
| largeintestine | 87.87 | 85.97 |
|     spleen     | 81.41 | 81.27 |
|      lung      | 18.44 | 12.44 |
+----------------+-------+-------+
2022-09-17 14:23:22,736 - mmseg - INFO - Summary:
2022-09-17 14:23:22,737 - mmseg - INFO - 
+------+-------+-------+
| aAcc | mDice |  mAcc |
+------+-------+-------+
| 97.5 | 77.84 | 76.64 |
+------+-------+-------+
2022-09-17 14:23:22,737 - mmseg - INFO - Exp name: config.py
2022-09-17 14:23:22,737 - mmseg - INFO - Iter(val) [70]	aAcc: 0.9750, mDice: 0.7784, mAcc: 0.7664, Dice.background: 0.9862, Dice.kidney: 0.9287, Dice.prostate: 0.8785, Dice.largeintestine: 0.8787, Dice.spleen: 0.8141, Dice.lung: 0.1844, Acc.background: 0.9879, Acc.kidney: 0.9388, Acc.prostate: 0.8750, Acc.largeintestine: 0.8597, Acc.spleen: 0.8127, Acc.lung: 0.1244
